{
	"name": "Step 3 - Create External Resources",
	"properties": {
		"description": "This pipeline will add the required schema, stored procedures and external resources to the database that will be used to backup the database to BLOB storage",
		"activities": [
			{
				"name": "Create backup schema",
				"description": "This creates the backup schema to be used, the schema name is parameterized, if you do change it, make sure that it is a valid value for a schema. \n\nThis schema cannot already exist in the database!",
				"type": "Lookup",
				"dependsOn": [
					{
						"activity": "Set user name",
						"dependencyConditions": [
							"Succeeded"
						]
					},
					{
						"activity": "Set password",
						"dependencyConditions": [
							"Succeeded"
						]
					},
					{
						"activity": "Set storage location",
						"dependencyConditions": [
							"Succeeded"
						]
					}
				],
				"policy": {
					"timeout": "7.00:00:00",
					"retry": 0,
					"retryIntervalInSeconds": 30,
					"secureOutput": true,
					"secureInput": true
				},
				"userProperties": [],
				"typeProperties": {
					"source": {
						"type": "SqlDWSource",
						"sqlReaderQuery": {
							"value": "EXEC('CREATE SCHEMA [@{pipeline().parameters.sql_BackupSchemaName}]');\nSELECT 1;",
							"type": "Expression"
						},
						"queryTimeout": "02:00:00",
						"partitionOption": "None"
					},
					"dataset": {
						"referenceName": "set_blank",
						"type": "DatasetReference",
						"parameters": {
							"DSBackupServerName": {
								"value": "@pipeline().parameters.infra_BackupSqlServer",
								"type": "Expression"
							},
							"DSBackupDatabaseName": {
								"value": "@pipeline().parameters.synapse_DatabaseBackupName",
								"type": "Expression"
							},
							"DSBackupUsername": {
								"value": "@variables('security_BackupUserName')",
								"type": "Expression"
							},
							"DSBackupUserPassword": {
								"value": "@variables('security_BackupUserPassword')",
								"type": "Expression"
							}
						}
					}
				}
			},
			{
				"name": "Create Master Key",
				"description": "This will attempt to create a Master Key on the database, but will fail if one already exists. Failure here would be normal and could just be ignored.",
				"type": "Lookup",
				"dependsOn": [
					{
						"activity": "Get password from AKV",
						"dependencyConditions": [
							"Succeeded"
						]
					}
				],
				"policy": {
					"timeout": "7.00:00:00",
					"retry": 0,
					"retryIntervalInSeconds": 30,
					"secureOutput": true,
					"secureInput": true
				},
				"userProperties": [],
				"typeProperties": {
					"source": {
						"type": "SqlDWSource",
						"sqlReaderQuery": {
							"value": "IF NOT EXISTS (SELECT * FROM sys.symmetric_keys WHERE [name] LIKE '%DatabaseMasterKey%')BEGIN\n    CREATE MASTER KEY ENCRYPTION BY PASSWORD = '@{activity('Get password from AKV').output.value}';\nEND\nSELECT 1;",
							"type": "Expression"
						},
						"queryTimeout": "02:00:00",
						"partitionOption": "None"
					},
					"dataset": {
						"referenceName": "set_blank",
						"type": "DatasetReference",
						"parameters": {
							"DSBackupServerName": {
								"value": "@pipeline().parameters.infra_BackupSqlServer",
								"type": "Expression"
							},
							"DSBackupDatabaseName": {
								"value": "@pipeline().parameters.synapse_DatabaseBackupName",
								"type": "Expression"
							},
							"DSBackupUsername": {
								"value": "@variables('security_BackupUserName')",
								"type": "Expression"
							},
							"DSBackupUserPassword": {
								"value": "@variables('security_BackupUserPassword')",
								"type": "Expression"
							}
						}
					}
				}
			},
			{
				"name": "Create DATABASE SCOPED CREDENTIAL",
				"description": "Created the database scoped credentials that will be used to connect to BLOB storage. It will use the name and secret from AKV, feel free to change how the credentials are specified, but keep the name",
				"type": "Lookup",
				"dependsOn": [
					{
						"activity": "Set DSC Secret",
						"dependencyConditions": [
							"Succeeded"
						]
					},
					{
						"activity": "Set DSC Identity",
						"dependencyConditions": [
							"Succeeded"
						]
					}
				],
				"policy": {
					"timeout": "7.00:00:00",
					"retry": 0,
					"retryIntervalInSeconds": 30,
					"secureOutput": true,
					"secureInput": true
				},
				"userProperties": [],
				"typeProperties": {
					"source": {
						"type": "SqlDWSource",
						"sqlReaderQuery": {
							"value": "CREATE DATABASE SCOPED CREDENTIAL [@{pipeline().parameters.sql_BackupSchemaName}BackupBlobStorageCreds]\nWITH\n     IDENTITY   = '@{variables('security_DSCIdentity')}'\n,    SECRET     = '@{variables('security_DSCSecret')}';\nSELECT 1;\n\n",
							"type": "Expression"
						},
						"queryTimeout": "02:00:00",
						"partitionOption": "None"
					},
					"dataset": {
						"referenceName": "set_blank",
						"type": "DatasetReference",
						"parameters": {
							"DSBackupServerName": {
								"value": "@pipeline().parameters.infra_BackupSqlServer",
								"type": "Expression"
							},
							"DSBackupDatabaseName": {
								"value": "@pipeline().parameters.synapse_DatabaseBackupName",
								"type": "Expression"
							},
							"DSBackupUsername": {
								"value": "@variables('security_BackupUserName')",
								"type": "Expression"
							},
							"DSBackupUserPassword": {
								"value": "@variables('security_BackupUserPassword')",
								"type": "Expression"
							}
						}
					}
				}
			},
			{
				"name": "CREATE EXTERNAL DATA SOURCE",
				"description": "Creating the external data source, feel free to change it, but leave the name the same",
				"type": "Lookup",
				"dependsOn": [
					{
						"activity": "Create DATABASE SCOPED CREDENTIAL",
						"dependencyConditions": [
							"Succeeded"
						]
					}
				],
				"policy": {
					"timeout": "7.00:00:00",
					"retry": 0,
					"retryIntervalInSeconds": 30,
					"secureOutput": true,
					"secureInput": true
				},
				"userProperties": [],
				"typeProperties": {
					"source": {
						"type": "SqlDWSource",
						"sqlReaderQuery": {
							"value": "IF NOT EXISTS (SELECT * FROM sys.external_data_Sources WHERE [name] = '@{pipeline().parameters.sql_BackupSchemaName}BackupBlobStorage')\nBEGIN\nCREATE EXTERNAL DATA SOURCE [@{pipeline().parameters.sql_BackupSchemaName}BackupBlobStorage]\nWITH\n(    LOCATION   = 'wasbs://@{variables('infra_StorageLocation')}'\n,    CREDENTIAL = @{pipeline().parameters.sql_BackupSchemaName}BackupBlobStorageCreds\n,    TYPE       = HADOOP\n);\nEND\nSELECT 1;",
							"type": "Expression"
						},
						"queryTimeout": "02:00:00",
						"partitionOption": "None"
					},
					"dataset": {
						"referenceName": "set_blank",
						"type": "DatasetReference",
						"parameters": {
							"DSBackupServerName": {
								"value": "@pipeline().parameters.infra_BackupSqlServer",
								"type": "Expression"
							},
							"DSBackupDatabaseName": {
								"value": "@pipeline().parameters.synapse_DatabaseBackupName",
								"type": "Expression"
							},
							"DSBackupUsername": {
								"value": "@variables('security_BackupUserName')",
								"type": "Expression"
							},
							"DSBackupUserPassword": {
								"value": "@variables('security_BackupUserPassword')",
								"type": "Expression"
							}
						}
					}
				}
			},
			{
				"name": "CREATE EXTERNAL FILE FORMAT",
				"description": "This is the external file format that will by used to backup the tables, feel free to change the type, but leave the name as is",
				"type": "Lookup",
				"dependsOn": [
					{
						"activity": "CREATE EXTERNAL DATA SOURCE",
						"dependencyConditions": [
							"Succeeded"
						]
					}
				],
				"policy": {
					"timeout": "7.00:00:00",
					"retry": 0,
					"retryIntervalInSeconds": 30,
					"secureOutput": true,
					"secureInput": true
				},
				"userProperties": [],
				"typeProperties": {
					"source": {
						"type": "SqlDWSource",
						"sqlReaderQuery": "IF NOT EXISTS (SELECT * FROM sys.external_file_formats WHERE [name] = 'Backup_FileFormat')\nBEGIN\n\nCREATE EXTERNAL FILE FORMAT Backup_FileFormat  \nWITH (  \n    FORMAT_TYPE = PARQUET  \n      , DATA_COMPRESSION = 'org.apache.hadoop.io.compress.SnappyCodec'  \n    );\nEND\nSELECT 1;",
						"queryTimeout": "02:00:00",
						"partitionOption": "None"
					},
					"dataset": {
						"referenceName": "set_blank",
						"type": "DatasetReference",
						"parameters": {
							"DSBackupServerName": {
								"value": "@pipeline().parameters.infra_BackupSqlServer",
								"type": "Expression"
							},
							"DSBackupDatabaseName": {
								"value": "@pipeline().parameters.synapse_DatabaseBackupName",
								"type": "Expression"
							},
							"DSBackupUsername": {
								"value": "@variables('security_BackupUserName')",
								"type": "Expression"
							},
							"DSBackupUserPassword": {
								"value": "@variables('security_BackupUserPassword')",
								"type": "Expression"
							}
						}
					}
				}
			},
			{
				"name": "Get password from AKV",
				"type": "WebActivity",
				"dependsOn": [
					{
						"activity": "Create createdb schema",
						"dependencyConditions": [
							"Succeeded"
						]
					}
				],
				"policy": {
					"timeout": "7.00:00:00",
					"retry": 0,
					"retryIntervalInSeconds": 30,
					"secureOutput": true,
					"secureInput": true
				},
				"userProperties": [],
				"typeProperties": {
					"url": {
						"value": "@pipeline().parameters.security_AKVMasterKeyUri",
						"type": "Expression"
					},
					"method": "GET",
					"authentication": {
						"type": "MSI",
						"resource": "https://vault.azure.net"
					}
				}
			},
			{
				"name": "Get identity from AKV for Database Scoped Credentials",
				"type": "WebActivity",
				"dependsOn": [
					{
						"activity": "Drop Database Scoped Credentials",
						"dependencyConditions": [
							"Completed"
						]
					}
				],
				"policy": {
					"timeout": "7.00:00:00",
					"retry": 0,
					"retryIntervalInSeconds": 30,
					"secureOutput": true,
					"secureInput": true
				},
				"userProperties": [],
				"typeProperties": {
					"url": {
						"value": "@pipeline().parameters.security_AKVDatabaseScopedCredentialsUri",
						"type": "Expression"
					},
					"method": "GET",
					"authentication": {
						"type": "MSI",
						"resource": "https://vault.azure.net"
					}
				}
			},
			{
				"name": "Get secret from AKV for Database Scoped Credentials",
				"type": "WebActivity",
				"dependsOn": [
					{
						"activity": "Drop Database Scoped Credentials",
						"dependencyConditions": [
							"Completed"
						]
					}
				],
				"policy": {
					"timeout": "7.00:00:00",
					"retry": 0,
					"retryIntervalInSeconds": 30,
					"secureOutput": true,
					"secureInput": true
				},
				"userProperties": [],
				"typeProperties": {
					"url": {
						"value": "@pipeline().parameters.security_AKVDatabaseScopedCredentialsSecretUri",
						"type": "Expression"
					},
					"method": "GET",
					"authentication": {
						"type": "MSI",
						"resource": "https://vault.azure.net"
					}
				}
			},
			{
				"name": "Set DSC Identity",
				"type": "SetVariable",
				"dependsOn": [
					{
						"activity": "Get identity from AKV for Database Scoped Credentials",
						"dependencyConditions": [
							"Succeeded"
						]
					}
				],
				"userProperties": [],
				"typeProperties": {
					"variableName": "security_DSCIdentity",
					"value": {
						"value": "@activity('Get identity from AKV for Database Scoped Credentials').output.value",
						"type": "Expression"
					}
				}
			},
			{
				"name": "Set DSC Secret",
				"type": "SetVariable",
				"dependsOn": [
					{
						"activity": "Get secret from AKV for Database Scoped Credentials",
						"dependencyConditions": [
							"Succeeded"
						]
					}
				],
				"userProperties": [],
				"typeProperties": {
					"variableName": "security_DSCSecret",
					"value": {
						"value": "@activity('Get secret from AKV for Database Scoped Credentials').output.value",
						"type": "Expression"
					}
				}
			},
			{
				"name": "Get backup database user name from AKV",
				"type": "WebActivity",
				"dependsOn": [],
				"policy": {
					"timeout": "7.00:00:00",
					"retry": 0,
					"retryIntervalInSeconds": 30,
					"secureOutput": true,
					"secureInput": true
				},
				"userProperties": [],
				"typeProperties": {
					"url": {
						"value": "@pipeline().parameters.security_AKVBackupUserNameUri",
						"type": "Expression"
					},
					"method": "GET",
					"authentication": {
						"type": "MSI",
						"resource": "https://vault.azure.net"
					}
				}
			},
			{
				"name": "Get backup database user password from AKV",
				"type": "WebActivity",
				"dependsOn": [],
				"policy": {
					"timeout": "7.00:00:00",
					"retry": 0,
					"retryIntervalInSeconds": 30,
					"secureOutput": true,
					"secureInput": true
				},
				"userProperties": [],
				"typeProperties": {
					"url": {
						"value": "@pipeline().parameters.security_AKVBackupUserPasswordUri",
						"type": "Expression"
					},
					"method": "GET",
					"authentication": {
						"type": "MSI",
						"resource": "https://vault.azure.net"
					}
				}
			},
			{
				"name": "Set user name",
				"type": "SetVariable",
				"dependsOn": [
					{
						"activity": "Get backup database user name from AKV",
						"dependencyConditions": [
							"Succeeded"
						]
					}
				],
				"userProperties": [],
				"typeProperties": {
					"variableName": "security_BackupUserName",
					"value": {
						"value": "@activity('Get backup database user name from AKV').output.value",
						"type": "Expression"
					}
				}
			},
			{
				"name": "Set password",
				"type": "SetVariable",
				"dependsOn": [
					{
						"activity": "Get backup database user password from AKV",
						"dependencyConditions": [
							"Succeeded"
						]
					}
				],
				"userProperties": [],
				"typeProperties": {
					"variableName": "security_BackupUserPassword",
					"value": {
						"value": "@activity('Get backup database user password from AKV').output.value",
						"type": "Expression"
					}
				}
			},
			{
				"name": "Get storage location",
				"type": "WebActivity",
				"dependsOn": [],
				"policy": {
					"timeout": "7.00:00:00",
					"retry": 0,
					"retryIntervalInSeconds": 30,
					"secureOutput": true,
					"secureInput": true
				},
				"userProperties": [],
				"typeProperties": {
					"url": {
						"value": "@pipeline().parameters.security_AKVBackupStorageLocationUri",
						"type": "Expression"
					},
					"method": "GET",
					"authentication": {
						"type": "MSI",
						"resource": "https://vault.azure.net"
					}
				}
			},
			{
				"name": "Set storage location",
				"type": "SetVariable",
				"dependsOn": [
					{
						"activity": "Get storage location",
						"dependencyConditions": [
							"Succeeded"
						]
					}
				],
				"userProperties": [],
				"typeProperties": {
					"variableName": "infra_StorageLocation",
					"value": {
						"value": "@activity('Get storage location').output.value",
						"type": "Expression"
					}
				}
			},
			{
				"name": "Drop Database Scoped Credentials",
				"type": "Lookup",
				"dependsOn": [
					{
						"activity": "Create Master Key",
						"dependencyConditions": [
							"Completed"
						]
					}
				],
				"policy": {
					"timeout": "7.00:00:00",
					"retry": 0,
					"retryIntervalInSeconds": 30,
					"secureOutput": true,
					"secureInput": true
				},
				"userProperties": [],
				"typeProperties": {
					"source": {
						"type": "SqlDWSource",
						"sqlReaderQuery": {
							"value": "DROP DATABASE SCOPED CREDENTIAL [@{pipeline().parameters.sql_BackupSchemaName}BackupBlobStorageCreds];\nSELECT 1;",
							"type": "Expression"
						},
						"queryTimeout": "02:00:00",
						"partitionOption": "None"
					},
					"dataset": {
						"referenceName": "set_blank",
						"type": "DatasetReference",
						"parameters": {
							"DSBackupServerName": {
								"value": "@pipeline().parameters.infra_BackupSqlServer",
								"type": "Expression"
							},
							"DSBackupDatabaseName": {
								"value": "@pipeline().parameters.synapse_DatabaseBackupName",
								"type": "Expression"
							},
							"DSBackupUsername": {
								"value": "@variables('security_BackupUserName')",
								"type": "Expression"
							},
							"DSBackupUserPassword": {
								"value": "@variables('security_BackupUserPassword')",
								"type": "Expression"
							}
						}
					}
				}
			},
			{
				"name": "Create createdb schema",
				"description": "This creates the schema that will be used to script the database.\n\nThis schema cannot already exist in the database!",
				"type": "Lookup",
				"dependsOn": [
					{
						"activity": "Create backup schema",
						"dependencyConditions": [
							"Succeeded"
						]
					}
				],
				"policy": {
					"timeout": "7.00:00:00",
					"retry": 0,
					"retryIntervalInSeconds": 30,
					"secureOutput": true,
					"secureInput": true
				},
				"userProperties": [],
				"typeProperties": {
					"source": {
						"type": "SqlDWSource",
						"sqlReaderQuery": {
							"value": "EXEC('CREATE SCHEMA [___ibCreateDb___]');\nSELECT 1;",
							"type": "Expression"
						},
						"queryTimeout": "02:00:00",
						"partitionOption": "None"
					},
					"dataset": {
						"referenceName": "set_blank",
						"type": "DatasetReference",
						"parameters": {
							"DSBackupServerName": {
								"value": "@pipeline().parameters.infra_BackupSqlServer",
								"type": "Expression"
							},
							"DSBackupDatabaseName": {
								"value": "@pipeline().parameters.synapse_DatabaseBackupName",
								"type": "Expression"
							},
							"DSBackupUsername": {
								"value": "@variables('security_BackupUserName')",
								"type": "Expression"
							},
							"DSBackupUserPassword": {
								"value": "@variables('security_BackupUserPassword')",
								"type": "Expression"
							}
						}
					}
				}
			}
		],
		"parameters": {
			"infra_BackupSqlServer": {
				"type": "securestring"
			},
			"synapse_DatabaseBackupName": {
				"type": "securestring"
			},
			"sql_BackupSchemaName": {
				"type": "string",
				"defaultValue": "___ibBackup___"
			},
			"security_AKVMasterKeyUri": {
				"type": "securestring"
			},
			"security_AKVDatabaseScopedCredentialsUri": {
				"type": "securestring"
			},
			"security_AKVDatabaseScopedCredentialsSecretUri": {
				"type": "securestring"
			},
			"security_AKVBackupUserNameUri": {
				"type": "securestring"
			},
			"security_AKVBackupUserPasswordUri": {
				"type": "securestring"
			},
			"security_AKVBackupStorageLocationUri": {
				"type": "securestring"
			},
			"sql_SkipSchemas": {
				"type": "securestring"
			}
		},
		"variables": {
			"SynapseDw_SqlServerName": {
				"type": "String"
			},
			"SynapseDw_DatabaseName": {
				"type": "String"
			},
			"BlobStore_BackupContainer": {
				"type": "String"
			},
			"BlobStore_Path": {
				"type": "String"
			},
			"SynapseDw_BackupType": {
				"type": "String"
			},
			"security_TemporaryPassword": {
				"type": "String"
			},
			"security_DSCIdentity": {
				"type": "String"
			},
			"security_DSCSecret": {
				"type": "String"
			},
			"security_BackupUserName": {
				"type": "String"
			},
			"security_BackupUserPassword": {
				"type": "String"
			},
			"infra_StorageLocation": {
				"type": "String"
			}
		},
		"folder": {
			"name": "Backup DW"
		},
		"annotations": [],
		"lastPublishTime": "2021-11-02T18:25:20Z"
	},
	"type": "Microsoft.DataFactory/factories/pipelines"
}